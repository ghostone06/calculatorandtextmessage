##############Çözülen Örnekler Burada toplanıyor#############



#################################################################################################################
Q6:
-----
This problem takes its name by arguably the most important event in the life of the ancient historian Josephus: according to his tale, he and his 40 soldiers were trapped in a cave by the Romans during a siege.

Refusing to surrender to the enemy, they instead opted for mass suicide, with a twist: they formed a circle and proceeded to kill one man every three, until one last man was left (and that it was supposed to kill himself to end the act).

Well, Josephus and another man were the last two and, as we now know every detail of the story, you may have correctly guessed that they didn't exactly follow through the original idea.

You are now to create a function that returns a Josephus permutation, taking as parameters the initial array/list of items to be permuted as if they were in a circle and counted out every k places until none remained.

Tips and notes: it helps to start counting from 1 up to n, instead of the usual range 0 to n-1; k will always be >=1.

For example, with an array=[1,2,3,4,5,6,7] and k=3, the function should act this way.

[1,2,3,4,5,6,7] - initial sequence
[1,2,4,5,6,7] => 3 is counted out and goes into the result [3]
[1,2,4,5,7] => 6 is counted out and goes into the result [3,6]
[1,4,5,7] => 2 is counted out and goes into the result [3,6,2]
[1,4,5] => 7 is counted out and goes into the result [3,6,2,7]
[1,4] => 5 is counted out and goes into the result [3,6,2,7,5]
[4] => 1 is counted out and goes into the result [3,6,2,7,5,1]
[] => 4 is counted out and goes into the result [3,6,2,7,5,1,4]
So our final result is:

[3,6,2,7,5,1,4]

Soln:
------
public static List<object> JosephusPermutation(List<object> items, int k)
    {
        List<object> result = new List<object>();
        int index = 0;

        while (items.Count > 0)
        {
            index = (index + k - 1) % items.Count;
            result.Add(items[index]);
            items.RemoveAt(index);
        }

        return result;
        
    }
#################################################################################################################
Q5:
-----
Consider a sequence u where u is defined as follows:

The number u(0) = 1 is the first one in u.
For each x in u, then y = 2 * x + 1 and z = 3 * x + 1 must be in u too.
There are no other numbers in u.
Ex: u = [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, ...]

1 gives 3 and 4, then 3 gives 7 and 10, 4 gives 9 and 13, then 7 gives 15 and 22 and so on...

Task:
Given parameter n the function dbl_linear (or dblLinear...) returns the element u(n) of the ordered (with <) sequence u (so, there are no duplicates).

Example:
dbl_linear(10) should return 22

Note:
Focus attention on efficiency

Soln:
--------
public static int DblLinear(int n)
    {
        SortedSet<int> sequence = new SortedSet<int> { 1 };
        int count = 0;

        while (true)
        {
            int x = sequence.Min;
            sequence.Remove(x);

            if (count == n)
                return x;

            int y = 2 * x + 1;
            int z = 3 * x + 1;

            sequence.Add(y);
            sequence.Add(z);
            count++;
        }
    }
#################################################################################################################
Q4: 
--------------
A pangram is a sentence that contains every single letter of the alphabet at least once. For example, the sentence "The quick brown fox jumps over the lazy dog" is a pangram, because it uses the letters A-Z at least once (case is irrelevant).

Given a string, detect whether or not it is a pangram. Return True if it is, False if not. Ignore numbers and punctuation.

Soln:
-----------
using System;
using System.Collections.Generic;
using System.Linq;

static void Main()
    {
        bool test = IsPangram("The quick brown ox jumps over the lazy dog.");
        Console.WriteLine(test);
    }

public static class Kata
{
  public static bool IsPangram(string str) => str.ToLower().Where(char.IsLetter).Distinct().Count() == 26;
}
#################################################################################################################
Q3:
----------------
Write a simple parser that will parse and run Deadfish.

Deadfish has 4 commands, each 1 character long:

i increments the value (initially 0)
d decrements the value
s squares the value
o outputs the value into the return array
Invalid characters should be ignored.

Deadfish.Parse("iiisdoso") => new int[] {8, 64};

Soln:
------------
static void Main()
    {
        var data = "iiisdosodddddiso";
        int[] parser = new int[data.Length];
        parser = Parse(data);
        foreach (int i in parser)
        {
            Console.WriteLine(i);
        }
    }

    public static int[] Parse(string data)
    {
        int number = 0;
        List<int> result = new List<int>();
        foreach (char item in data)
        {
            switch (item)
            {
                case 'i':
                    number++;
                    break;
                case 'd':
                    number--;
                    break;
                case 's':
                    number *= number;
                    break;
                case 'o':
                    result.Add(number);
                    break;
                default:
                    throw new Exception();
            }
        }
        return result.ToArray();
    }
#################################################################################################################
    
Q2:
-----------
Your task, is to create N×N multiplication table, of size provided in parameter.

For example, when given size is 3:

1 2 3
2 4 6
3 6 9
For the given example, the return value should be:

[[1,2,3],[2,4,6],[3,6,9]]

    Soln:
----------------
    static void Main()
    {
        MultiplicationTable(3);
    }

    public static int[,] MultiplicationTable(int size)
{
    var row
    = 0;
    var col
    = 0;
    int [, ]
    twoDimArr =
    new int
    [ size, size ]
    ; while
    (row <
    size) {
        twoDimArr [ row, col ]
        = col
        == 0
        ? twoDimArr
        [ row, col ]
        + (row
        +
        1): twoDimArr
        [ row, col - 1 ]
        + (row
        + 1);
        if (col
        < size
        - 1)
        {
            col++;
        }
        else if
        (col ==
        size -
        1) {
            row++; col
            = 0;
        }
    }

    return twoDimArr;
}

#################################################################################################################
      Q1:
      -------
      Question:Let us consider this example (array written in general format):

    ls = [0, 1, 3, 6, 10]

    Its following parts:

    ls = [0, 1, 3, 6, 10]
    ls = [1, 3, 6, 10]
    ls = [3, 6, 10]
    ls = [6, 10]
    ls = [10]
    ls = []
    The corresponding sums are (put together in a list): [20, 20, 19, 16, 10, 0]

    The function parts_sums (or its variants in other languages) will take as parameter a list ls and return a list of the sums of its parts as defined above.

    Other Examples:
    ls = [1, 2, 3, 4, 5, 6] 
    parts_sums(ls) -> [21, 20, 18, 15, 11, 6, 0]

    ls = [744125, 935, 407, 454, 430, 90, 144, 6710213, 889, 810, 2579358]
    parts_sums(ls) -> [10037855, 9293730, 9292795, 9292388, 9291934, 9291504, 9291414, 9291270, 2581057, 2580168, 2579358, 0]
    Notes
    Take a look at performance: some lists have thousands of elements.
    Please ask before translating.

      Soln:
      --------
    static void Main()
    {
        int[] test = new int[] { 0, 1, 3, 6, 10 };
        PartsSums(test);
    }
    public static int[] PartsSums(int[] ls)
    {
        int[] result = new int[ls.Length + 1];
        int currentSum = ls.Sum();

        for (int i = 0; i < ls.Length; i++)
        {
            result[i] = currentSum;
            currentSum -= ls[i];
        }

        result[ls.Length] = 0; 
        return result;
    }
     